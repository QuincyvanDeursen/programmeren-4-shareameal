const assert = require("assert");
const dbconnection = require("../../database/dbconnection");

// password must contain 1 upper and lowercase char, 1 number, and atleast 8 chars.
// const passwordRegex = new RegExp(
//   /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/
// );

let controller = {
  validateEmail: (req, res, next) => {
    //email regex
    const emailRegex = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    let user = req.body;
    let emailAdress = user.emailAdress;
    try {
      assert(emailRegex.test(emailAdress) === true, "Emailaddress isn't valid");
    } catch (err) {
      console.log(err);
      error = {
        status: 400,
        message: err.message,
      };
      next(error);
    }

    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        return res.status(400).json({
          Status: 400,
          message: err,
        });
      }

      connection.query(
        `SELECT * FROM user WHERE emailAdress = '${req.body.emailAdress}'`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();
          // handle error after release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              message: error.message,
            });
          }
          if (results.length == 0 || results[0].id == req.params.userId) {
            next();
          } else {
            return res.status(409).json({
              status: 409,
              message: `Creating user failed. There already is an user with the email '${req.body.emailAdress}'.`,
            });
          }
        }
      );
    });
  },

  //validate the data types of the given user.
  validateUser: (req, res, next) => {
    let user = req.body;
    let {
      firstName,
      lastName,
      emailAdress,
      password,
      city,
      street,
      phoneNumber,
      isActive,
    } = user;
    console.log(user);
    try {
      assert(typeof firstName === "string", "firstname must be of type string");
      assert(typeof lastName === "string", "lastname must be of type string");

      assert(
        typeof emailAdress === "string",
        "emailaddress must be of type string"
      );

      assert(typeof password === "string", "password must be of type string");

      assert(typeof city === "string", "city must be of type string");

      assert(typeof street === "string", " street must be of type string");

      assert(typeof isActive === "number", "password must be of type number");

      assert(
        typeof phoneNumber === "string",
        "phoneNumber must be of type string"
      );
      // assert(
      //   passwordRegex.test(password) === true,
      //   "password isn't valid (min 8 chars, 1 uppercase, 1 lowercase, 1 number)"
      // );

      next();
    } catch (err) {
      console.log(err);
      const error = {
        status: 400,
        message: err.message,
      };
      next(error);
    }
  },

  //add an user
  addUser: (req, res) => {
    let userReq = req.body;
    let values = Object.keys(userReq).map(function (key) {
      return userReq[key];
    });

    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          message: err,
        });
      }
      // Use the connection
      connection.query(
        `INSERT INTO user (firstName, lastName, street, city, isActive, password, emailAdress, phoneNumber) VALUES (?)`,
        [values],
        function (error, results, fields) {
          connection.release();
          // Handle error after the release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              message: error.message,
            });
          }

          // succesfull query handlers
          if (results.affectedRows > 0) {
            res.status(201).json({
              status: 201,
              result: `User ${userReq.firstName} ${userReq.lastName} created`,
            });
          } else {
            res.status(400).json({
              status: 400,
              message: `User can not be created`,
            });
          }
        }
      );
    });
  },

  //update an user
  updateUser(req, res) {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        return res.status(400).json({
          Status: 400,
          Error: err,
        });
      }

      // Use the connection
      connection.query(
        "UPDATE user SET ? WHERE id = ?",
        [req.body, req.params.userId],
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();
          // Handle error after the release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              error: error.message,
            });
          }

          // succesfull query handlers
          if (results.affectedRows > 0) {
            res.status(200).json({
              status: 200,
              result: `User with id ${req.params.userId} updated.`,
            });
          } else {
            res.status(400).json({
              status: 400,
              message: `Updating user failed.`,
            });
          }
        }
      );
    });
  },

  // get the profile of an user
  getProfile: (req, res, next) => {
    const error = {
      status: 401,
      message: `End-point not created yet.`,
    };
    next(error);
  },

  //find an user by id
  findUser: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          message: err,
        });
      }

      connection.query(
        `SELECT * FROM user WHERE id = ${req.params.userId}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();
          // handle error after release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              message: error.message,
            });
          }
          if (results.length > 0) {
            return res.status(200).json({
              status: 200,
              result: results,
            });
          } else {
            return res.status(404).json({
              status: 404,
              message: `Can not find user with ID ${req.params.userId}`,
            });
          }
        }
      );
    });
  },

  //Retrieve all users
  getAllUsers: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          message: err,
        });
      }

      let length = 100000;
      if (req.query.length != null) {
        length = req.query.length;
      }
      // Use the connection
      connection.query(
        `SELECT * FROM user LIMIT ${length}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();

          // Handle error after the release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              message: error.message,
            });
          }
          res.status(200).json({
            status: 200,
            result: results,
          });
        }
      );
    });
  },

  //Delete user
  deleteUser: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          message: err,
        });
      }

      // Use the connection
      connection.query(
        `DELETE FROM user WHERE ID = ${req.params.userId}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();

          // Handle error after the release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              message: error.message,
            });
          }

          if (results.affectedRows > 0) {
            res.status(200).json({
              status: 200,
              result: `User with id ${req.params.userId} succesfully deleted.`,
            });
          } else {
            res.status(400).json({
              status: 400,
              message: `User with id ${req.params.userId} not found.`,
            });
          }
        }
      );
    });
  },
};

module.exports = controller;
