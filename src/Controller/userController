const assert = require("assert");
const dbconnection = require("../../database/dbconnection");

//regex
// email without spaces and no multiple '@' signs. Must contain atleast one '@' and one '.'
const emailRegex = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
// password must contain 1 upper and lowercase char, 1 number, and atleast 8 chars.
const passwordRegex = new RegExp(
  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/
);

let controller = {
  //validate the data types of the given user.
  validateUser: (req, res, next) => {
    let user = req.body;
    let { firstName, lastName, emailAdress, password } = user;

    try {
      assert(
        typeof firstName === "string",
        "AddUser: firstname must be of type string"
      );
      assert(
        typeof lastName === "string",
        "AddUser: lastname must be of type string"
      );
      assert(
        typeof street === "string",
        "AddUser: street must be of type string"
      );
      assert(typeof city === "string", "AddUser: city must be of type string");
      assert(
        typeof isActive === "number",
        "AddUser: isActive must be of type number"
      );
      assert(
        typeof emailAdress === "string",
        "AddUser: emailaddress must be of type string"
      );
      assert(
        emailRegex.test(emailAdress) === true,
        "AddUser: emailaddress isn't valid"
      );
      assert(
        typeof password === "string",
        "AddUser: password must be of type string"
      );
      assert(
        passwordRegex.test(password) === true,
        "AddUser: password isn't valid (min 8 chars, 1 uppercase, 1 lowercase, 1 number)"
      );
      assert(
        typeof phoneNumber === "number",
        "AddUser: phoneNumber must be of type string"
      );

      next();
    } catch (err) {
      console.log(err);
      const error = {
        status: 400,
        result: err.message,
      };
      next(error);
    }
  },

  //add an user
  addUser: (req, res) => {
    let userReq = req.body;
    let values = Object.keys(userReq).map(function (key) {
      return userReq[key];
    });

    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          Error: err,
        });
      }
      // Use the connection
      connection.query(
        `INSERT INTO user (firstName, lastName, street, city, isActive, emailAdress, password, phoneNumber) VALUES (?)`,
        [values],
        function (error, results, fields) {
          connection.release();
          // Handle error after the release.
          if (error) {
            console.log(error);
            let errorMessage = error.message;
            if (error.errno == 1062) {
              errorMessage = `Creating user failed. There already is an user with the email '${req.body.emailAdress}'.`;
            }
            return res.status(409).json({
              status: 409,
              error: errorMessage,
            });
          }

          // succesfull query handlers
          if (results.affectedRows > 0) {
            res.status(201).json({
              status: 201,
              result: `User ${userReq.firstName} ${userReq.lastName} created`,
            });
          } else {
            res.status(401).json({
              status: 401,
              result: `User can not be created`,
            });
          }
        }
      );
    });
  },

  //update an user
  updateUser: (req, res) => {
    let userReq = req.body;
    let {
      firstName,
      lastName,
      street,
      city,
      isActive,
      emailAdress,
      password,
      phoneNumber,
    } = userReq;
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          Error: err,
        });
      }

      // Use the connection
      connection.query(
        `UPDATE user SET firstName = '${firstName}', lastName = '${lastName}', street = '${street}', city = '${city}', isActive = ${isActive}, emailAdress = '${emailAdress}', password = '${password}', phoneNumber = '${phoneNumber}' WHERE id = ${req.params.userId}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();
          // Handle error after the release.
          if (error) {
            console.log(error);
            let errorMessage = error.message;
            if (error.errno == 1062) {
              errorMessage = `Update failed. There already is an user with the email '${emailAdress}'.`;
            }
            return res.status(400).json({
              status: 400,
              error: errorMessage,
            });
          }

          // succesfull query handlers
          if (results.affectedRows > 0) {
            console.log(`User with id ${req.params.userId} updated.`);
            res.status(200).json({
              status: 200,
              result: `User with id ${req.params.userId} updated.`,
            });
          } else {
            res.status(400).json({
              status: 400,
              result: `Updating user failed.`,
            });
          }
        }
      );
    });
  },

  // get the profile of an user
  getProfile: (req, res, next) => {
    const error = {
      status: 401,
      result: `End-point not created yet.`,
    };
    next(error);
  },

  //find an user by id
  findUser: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          Error: err,
        });
      }

      connection.query(
        `SELECT * FROM user WHERE id = ${req.params.userId}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();
          // handle error after release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              error: error.message,
            });
          }
          if (results.length > 0) {
            return res.status(200).json({
              status: 200,
              result: results,
            });
          } else {
            return res.status(404).json({
              status: 404,
              error: `Can not find user with ID ${req.params.userId}`,
            });
          }
        }
      );
    });
  },

  //Retrieve all users
  getAllUsers: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          Error: err,
        });
      }
      // Use the connection
      connection.query("SELECT * FROM user", function (error, results, fields) {
        // When done with the connection, release it.
        connection.release();

        // Handle error after the release.
        if (error) {
          console.log(error);
          return res.status(400).json({
            status: 400,
            error: error.message,
          });
        }
        res.status(200).json({
          status: 200,
          result: results,
        });
      });
    });
  },

  //Delete user
  deleteUser: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      //not connected
      if (err) {
        throw res.status(400).json({
          Status: 400,
          Error: err,
        });
      }

      // Use the connection
      connection.query(
        `DELETE FROM user WHERE ID = ${req.params.userId}`,
        function (error, results, fields) {
          // When done with the connection, release it.
          connection.release();

          // Handle error after the release.
          if (error) {
            console.log(error);
            return res.status(400).json({
              status: 400,
              error: error.message,
            });
          }

          if (results.affectedRows > 0) {
            res.status(200).json({
              status: 200,
              result: `User with id ${req.params.userId} succesfully deleted.`,
            });
          } else {
            res.status(400).json({
              status: 400,
              error: `User with id ${req.params.userId} not found.`,
            });
          }
        }
      );
    });
  },
};

module.exports = controller;
