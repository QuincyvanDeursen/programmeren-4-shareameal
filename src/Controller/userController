const assert = require("assert");
let database = [];
const dbconnection = require("../../database/dbconnection");
let id = 0;
// email without spaces and no multiple '@' signs. Must contain atleast one '@' and one '.'
const emailRegex = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
// password must contain 1 upper and lowercase char, 1 number, and atleast 8 chars.
const passwordRegex = new RegExp(
  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/
);

let controller = {
  //validate the data types of the given user.
  validateUser: (req, res, next) => {
    let user = req.body;
    let { firstName, lastName, emailAdress, password } = user;

    try {
      assert(
        typeof firstName === "string",
        "AddUser: firstname must be of type string"
      );
      assert(
        typeof lastName === "string",
        "AddUser: lastname must be of type string"
      );
      assert(
        typeof emailAdress === "string",
        "AddUser: emailaddress must be of type string"
      );
      assert(
        emailRegex.test(emailAdress) === true,
        "AddUser: emailaddress isn't valid"
      );
      assert(
        typeof password === "string",
        "AddUser: password must be of type string"
      );
      assert(
        passwordRegex.test(password) === true,
        "AddUser: password isn't valid (min 8 chars, 1 uppercase, 1 lowercase, 1 number)"
      );

      next();
    } catch (err) {
      console.log(err);
      const error = {
        status: 400,
        result: err.message,
      };
      next(error);
    }
  },

  //add an user
  addUser: (req, res, next) => {
    let user = req.body;
    let email = user.emailAdress;
    let userArray = database.filter((item) => item.emailAdress == email);
    if (userArray.length > 0) {
      console.log(user);
      const error = {
        status: 401,
        result: "Email already in use",
      };
      next(error);
    } else {
      id++;
      user = {
        id,
        ...user,
      };
      database.push(user);
      res.status(201).json({
        status: 201,
        result: "gelukt",
      });
    }
  },

  //update an user
  updateUser: (req, res, next) => {
    //get the user for the given ID.
    let oldUserArray = database.filter((item) => item.id == req.params.userId);
    //if an user is found, create a user with the new req data to replace the old with the new user in the database
    if (oldUserArray.length > 0) {
      let oldUser = oldUserArray[0];
      let id = oldUser.id;
      let newUser = {
        id,
        ...req.body,
      };
      //filter to find emails addresses that match the (new) given emailaddress.
      let newEmail = req.body.emailAdress;
      let emails = database.filter(
        (item) => item.emailAdress.toLowerCase() == newEmail.toLowerCase()
      );
      //if the new email matches with one of the emails in the database. emails.length should be greather then 0.
      if (emails.length > 0) {
        // if the email matches with one of the other users emails, then an error is given.
        if (req.params.userId != emails[0].id) {
          const error = {
            Status: 400,
            Message: `${newEmail} is already in use`,
          };
          next(error);
          // if the id of the req user is the same as the id of the matching user, then it is allowed to update the email.
        } else {
          database.splice(database.indexOf(oldUser), 1, newUser);
          res.status(200).json({
            Status: 200,
            Message: `user with id ${oldUser.id} has been updated`,
          });
        }
        // if there isnt a match between the newUser email with old Users emails, it is allowed to update the user.
      } else {
        database.splice(database.indexOf(oldUser), 1, newUser);
        res.status(200).json({
          Status: 200,
          Message: `user with id ${oldUser.id} has been updated`,
        });
      }
      //if there is no user found for the given id, then give an error.
    } else {
      const error = {
        Status: 400,
        Message: `user with id ${oldUser.id} can not be found`,
      };
      next(error);
    }
  },

  // get the profile of an user
  getProfile: (req, res, next) => {
    const error = {
      status: 401,
      result: `End-point not created yet.`,
    };
    next(error);
  },

  //find an user by id
  findUser: (req, res, next) => {
    const userId = req.params.userId;
    console.log(`User met ID ${userId} gezocht`);
    let userArray = database.filter((item) => item.id == userId);
    if (userArray.length > 0) {
      let user = userArray[0];
      console.log(user);
      res.status(200).json({
        status: 200,
        result: user,
      });
    } else {
      const error = {
        status: 401,
        result: `User with ID ${userId} not found`,
      };
      next(error);
    }
  },

  //retrieve all users
  getAllUsers: (req, res) => {
    dbconnection.getConnection(function (err, connection) {
      if (err) throw err; // not connected!

      // Use the connection
      connection.query("SELECT * FROM user", function (error, results, fields) {
        // When done with the connection, release it.
        connection.release();

        // Handle error after the release.
        if (error) throw error;

        // Don't use the connection here, it has been returned to the pool.
        console.log("result = ", results.length);
        res.status(200).json({
          status: 200,
          result: results,
        });
      });
    });
  },

  //delete all users
  deleteUser: (req, res, next) => {
    let user = req.params.userId;
    let userArray = database.filter((item) => item.id == user);
    if (userArray.length > 0) {
      let userToDelete = userArray[0];
      database.splice(database.indexOf(userToDelete), 1);
      console.log(userToDelete);
      res.status(200).json({
        status: 200,
        result: `User with id ${user} succesfully deleted`,
      });
    } else {
      const error = {
        status: 401,
        result: `User with ID ${user} not found`,
      };
      next(error);
    }
  },
};

module.exports = controller;
